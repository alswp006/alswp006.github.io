var tipuesearch = {"pages": [{
    "title": "팀 프로젝트를 위한 JIRA 가이드라인",
    "text": "이슈 만드는 거 보려면 아래의 이슈 만들어보기로!! 목차 프로젝트 이슈 관리 이슈 유형 EPIC STORY TASK SUBTASK 이슈 구조 이슈 상태(Status) 관리 이슈 우선순위 설정 이슈의 작성 요령 이슈 만들어보기👈 이슈 확인하기 스프린트 확인 백로그 탭 라벨 별로 확인 보드 확인하기 전체적인 할 일 보기 프로젝트 이슈 관리 이슈 유형 EPIC STORY TASK SUBTASK EPIC 큰 단위의 업무 (여러 Task를 묶은 단위) 프로젝트의 주요 목표를 달성하기 위한 큰 이정표같은 느낌 예시: “사용자 계정 관리 시스템 구현”, “온라인 쇼핑몰 결제 시스템 구축” STORY 고객에게 가치를 제공하는 기능이나 요구 사항 고객 관점에서 이해할 수 있는 기능 단위 Epic을 구성하는 작은 단위 예시: “사용자가 이메일로 계정 생성”, “결제 과정에서 할인 코드 적용” TASK 주로 개발자나 디자이너가 직접 처리할 수 있는 업무 Story나 Epic의 하위 업무 (여러 Sub Task를 묶은 단위) 일반적으로 한 명의 팀원이 수행할 수 있는 크기로 설정 예시: “사용자 로그인 API 개발”, “데이터베이스 사용자 테이블 설계” SUBTASK 한 사람이 빠르게 처리할 수 있는 작은 규모의 업무 Task의 하위 업무로 모든 SubTask가 끝나야 해당 Task 완료 예시: “로그인 API 연동”, “로그인 실패 시 에러 메시지 처리” 이슈 구조 https://medium.com/dtevangelist/devops-jira%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%98%91%EC%97%85-1%EB%B6%80-63c71489f21d 이슈 상태(Status) 관리 To Do: 작업이 아직 시작되지 않은 상태 In Progress: 작업이 진행 중인 상태, 다음 밋업까지 해야하는 일로 밋업 때마다 설정 Done: 작업이 완료된 상태 Blocked: 진행이 막힌 상태, 다른 작업이나 조건에 의존 매 주 월, 수, 금에 진행하는 밋업에서 다음 밋업까지 해야 할 일들을 In Progress상태로 변경 다음 밋업까지 In Progress인 모든 Task를 완료하고 Done으로 변경해와야 함 이슈 우선순위 설정 Highest: 가장 긴급하고 중요한 작업 High: 중요하지만 즉각적인 대응이 필요하지는 않음 Medium: 표준 우선순위 Low: 시간이 남을 때 처리 가능한 작업 이슈의 작성 요령 제목: 작업 내용을 한눈에 알 수 있도록 간결하고 명확하게 작성 설명: 이슈의 목적, 요구 사항, 작업 방법, 예상 결과를 팀원들이 쉽게 이해할 수 있도록 상세히 작성 첨부파일: 필요한 경우 디자인, 문서, 코드 스니펫 등을 첨부하여 이해를 돕습니다. 이슈 만들어보기 다음 작업의 이슈 만들어보기 1. 사용자 로그인 (Epic) Task 1: 카카오, 네이버, 구글 소셜 로그인 API 연동 Subtask 1.1: 카카오 소셜 로그인 API 개발 Subtask 1.2: 네이버 소셜 로그인 API 개발 Subtask 1.3: 구글 소셜 로그인 API 개발 Task 2: 사용자 인증 토큰 발급 및 관리 Subtask 2.1: JWT 기반 토큰 발급 로직 구현 Subtask 2.2: 리프레시 토큰 구현 및 관리 Epic 상단바의 “만들기” 버튼 클릭 이슈 유형: “에픽” 선택 상태 To Do: 작업이 아직 시작되지 않은 상태 In Progress: 작업이 진행 중인 상태 Done: 작업이 완료된 상태 요약: “사용자 로그인” 설명: “사용자 로그인 기능 개발을 위한 Epic. 카카오, 네이버, 구글 소셜 로그인 API를 연동하고 JWT 토큰을 기반으로 사용자 인증 시스템을 구현” Start Date(시작일): 2024-10-21, Due Date(종료일): 2024-10-25 레이블 선택 프론트엔드: FE 백엔드: BE 인공지능: AI 클라우드: Cloud Task 상단바의 “만들기” 버튼 클릭 이슈 유형: “작업” 선택 상태 선택 요약: 소셜 로그인 API 연동 레이블 선택 프론트엔드: FE 백엔드: BE 인공지능: AI 클라우드: Cloud Subtask 이슈의 상위 작업을 선택 후 “하위 이슈 추가” 선택 제목 입력: 카카오 소셜 로그인 API 개발 하위 이슈 선택 설명 입력: “카카오 소셜 로그인 API를 연동하여 사용자가 카카오 계정을 통해 로그인할 수 있도록 함” 상태 선택 레이블 선택 이슈 확인하기 이슈 탭에서 확인 유형 별로 확인 담당자 별로 확인 스프린트 확인 각 스프린트와 스프린트의 Task가 표시 백로그 탭 라벨 별로 확인 BE AI(임시) 보드 확인하기 현재 진행 중인 스프린트의 Task가 표시 전체적인 할 일 보기 필터로 내 할 일만 보기, 활성 스프린트의 할 일 보기, 완료 항목 보기 등 가능",
    "tags": "AnomalyDetection project devita",
    "url": "/project/devita/2024-10-23-Jira/"
  },{
    "title": "단기 알고리즘 동아리 운영 후기!",
    "text": "단기 알고리즘 동아리 운영 후기! 9월 21일부터 11월 24일까지 진행했던 알고리즘 스터디 동아리가 끝났습니다! 처음으로 진행한 스터디이자 처음으로 주도해서 진행해본 스터디여서 느낀 점이 꽤나 많아 이에 대한 회고를 작성해보려 합니다! 제가 이 스터디를 진행하게된 계기는 두 가지였습니다. 혼자보다는 여러 명이 함께 진행하는 스터디가 공부에 더 도움이 될 것 같았고 2.학교에서 동아리를 만들어서 진행하라고 돈을 준다..!라는 이유 때문이었습니다! (30만원 받아서 책도 사고 맛있는 것도 많이 사먹었습니다!🍴) 시작하자마자 난관..😢 우선 동아리를 신청하려면 최소 3명이 있어야한다는 것이 첫 번째 난관이었습니다.. 제 주변에 개발자도 손에 꼽을 정도였는데 같은 학교에 재학중인 친구 개발자? 컴퓨터 공학과에 재학중인 친구 한 명이 전부였습니다.. 하지만 모르는 사람들과 하면 그 사람들이 열심히 할 수 있는 사람인지도 보장이 안 된다는 두려움 때문에 랜덤으로 스터디 원들을 고를 생각은 차마 하지 못했습니다.. 결국은 그래도 아는 사람과 하면 더 파이팅할 수 있을 것 같아서 컴퓨터 공학과 친구를 설득하고 친구의 친구를 한명 구하여 겨우 동아리를 시작할 수 있게 되었습니다!! 지금 생각해보면 좋은 선택이었던 것 같습니다!! 계획 세우기🗓️와 풀어조의 탄생👶 우선 이 동아리를 신청하려면 8주차동안 공부할 내용에 대한 계획서를 만들어서 제출해야 했습니다! 저는 python을 이용한 알고리즘 문제 풀이를 목표로 하였기 때문에 계획은 알고리즘 별로 아래와 같이 세웠습니다! python과 github, 백준 등이 어색한 팀원이 있을 수도 있기 때문에 사전에 만나 도구들의 사용법을 익히는 것을 시작으로 하여 위와 같이 알고리즘들을 공부하였습니다! 흠.. 이 때까지만 해도 저는 제가 계획을 잘 짰다고 생각하고 있었습니다.. (바퀴가 네모나도 굴러만 가면 되는 거면 동아리가 그래도 굴러는 갔다고 할 수 있겠네요..) 우선 스터디 계획은 1주 동안 각 주제를 공부해오고 만나서 공부해온 것에 대한 발표, 숙제 발표, 문제 풀이를 계획하였습니다! 위 계획은 그래도 잘 지켜진 것 같습니다!! 팀이름은 동아리를 만들기도 전에 혼자 정말 많이 고민했었는데요… 풀어조라는 이름이 탄생한 계기는 한 천재 작명가 덕분이었습니다. 나 : “팀 이름 뭘로 하는게 좋을까??” 팀원 1 : “음.. 풀어조는 어떨까요??” 이렇게 적어놓으니까 되게 별거 없어보이는데 저에게는 막힌 속이 뻥뚫렸던 난관 극복기였던 것 같습니다. 진짜 이렇게 보니까 별거없네요.. 저는 분명 이런 느낌이었는데 말이죠.. 아무튼 저희에게는 위대한 한걸음이 되었음은 분명합니다..!! 우당탕탕트트아으ㅏ아아악ㅏ 진행기.🏃‍♀️🏃🏃‍♂️ 만나서 2시간 스터디하는 걸로 계획했지만 기본 3시간은 넘게 하고 같이 머리 싸매고 눈물도 찔끔 흘렸지만 그래도 모두 즐겁고 열심하려고 노력했습니다! 우선 스터디를 하며 가장 좋았던 점은 발표였습니다! 서로 발표를 준비해오며 예상 질문들을 생각하고 틀린 점이 없도록 더 꼼꼼하게 공부해오는 계기가 되었고 공부해온 것을 설명하며 내용들이 더 잘 정리가 된 것 같아 만약 다음에 스터디를 하게 된다해도 발표는 꼭 넣을 것 같습니다!! 카톡부터 재밌었던 스터디 한번도 카톡에서 해결된 적 없는 저녁 고민🤔 진짜 많이 웃은 인싸 팀원들 이모티콘🤣 회식🥓 제일 맛있었던 것 두 번째로 맛있었던 것 간과한 점..🤔 처음 스터디를 계획했을 때는 만나서 5문제, 숙제 5문제를 풀면 괜찮을 거라고 생각하고 계획하였습니다.. 하지만 그렇게 되니 초반 쉬운 문제를 풀 때는 금방 끝나고 후반에 어려운 문제를 풀 때는 집에 못가는 상황이 발생하였습니다.. 후반에는 문제 수를 줄여서 난이도 조절이 가능했지만 초반에 쉬운 문제들을 좀 더 많이 풀어보았으면 실력 향상에 도움이 더 많이 되었을텐데라는 아쉬움이 남았던 것 같습니다.. 좋았던 점👍 스터디를 하며 좋았던 점은 많았던 것 같습니다!!! 발표를 준비하며 정말 많은 공부들을 하였고 발표를 하며 스피치 능력이나 의미 전달에 대해서도 많이 고민하며 성장하였던 것 같습니다! 또한 혼자 공부하는 것보다 같은 목표를 보며 공부한 것이 의지력 향상에 더 도움이 되었던 것 같습니다!! 가장 좋았던 것은 작지만 개발자 커뮤니티가 생겼다는 점이었습니다! 저희끼리 프로젝트 생각도 해보고 소소하지만 개발에 대한 얘기를 나누는 것이 정말 재밌었던 것 같습니다! 소감 사실 이번 스터디를 진행해보기 전에는 스터디의 장점들에 대해서 얘기로만 들었지 그렇게 와닿지는 않았었는데 스터디를 진행해보고 나니 정말 배운 것도 많고 느낀 점도 많았던 것 같습니다!! 공부는 물론 개발에 대한 얘기들을 하면서 공부 의욕도 더 생기고 정보도 공유하는 좋은 커뮤니티까지 생긴 것 같아 부가적인 장점들도 정말 많았던 것 같습니다!! 개인적으로는 발표를 이용한 공부와 개발에 대한 의욕이 높아진 것이 가장 좋았습니다! 스터디원들이 벡엔드를 지망하는 개발자였으면 자바와 스프링 스터디도 더 진행하고 싶었는데 둘 다 프론트엔드를 지망하고 있어서 이 꿈은 못 이룰 것 같습니다.. 그래도 나중에 같이 프로젝트는 할 수 있겠죠..? 스터디가 끝나고 이렇게 회고까지 적으니 시원섭섭 후련하네요! 다시 돌아가면 스터디 할거냐구요?? → 무조건. 조금 더 일찍 했으면 좋았을 것 같습니다!! 어쩌다보니 스터디 찬양론자가 되어버린 것 같기도 하고 회고는 무슨 일기를 쓴 것 같기는 한데 이만하고 회고를 마치겠습니다!! 다들 스터디 열심히 해보시면 큰 성장을 얻을 수 있을 거라고 생각합니다!! 마지막으로 팀원들에게 들어본 소감으로 지이이인짜 마치겠습니다! 기특한 녀석..!! 바쁜 녀석..!",
    "tags": "AnomalyDetection blog retrospect",
    "url": "/blog/retrospect/2023-11-27-algo-study/"
  },{
    "title": "자바 API(System.out.prinln() 뜯어보기🔨)",
    "text": "Java Api java 개발자가 제공하는 명령어입니다. 프로그램 개발에 자주 사용되는 클래스 및 인터페이스 모음, 라이브러리라고 부르기도 합니다. String 클래스, System 클래스 등도 API에 속하는 클래스입니다. API 문서 원하는 API를 쉽게 찾아 이용할 수 있도록 해주는 문서입니다. 명령어들의 사용법과 규격을 제공하는 문서입니다. 자바 제공 API 문서 https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/System.html https://docs.oracle.com/javase/8/docs/api/ 🔨 System.out.println() 뜯어보기 🔨 API에 대해 학습하다보니 System클래스에 대해 자주 예시로 드는 글들이 많습니다. 그래서 System.out.println()을 뜯어보며 API문서 참고, 자바 코드 참고 등을 연습해보려 합니다! 저희는 자바를 사용하며 System.out.println()라는 코드를 수도 없이 사용합니다. 이 한 줄의 문장을 하나하나 뜯어보겠습니다! System 우선 System 클래스로 들어가보겠습니다! public final class System { private static native void registerNatives(); static { registerNatives(); } private System() { } public static final InputStream in = null; public static final PrintStream out = null; ... } 위와 같이 구성되어 있었습니다. 우선 System이라는 클래스에 registerNative라는 변수가 private static native void 형태로 저장이 되어있습니다. private : 접근 제한자이며 변수가 클래스 내부에서만 사용될 수 있게 합니다. static : 클래스가 메모리에 올라갈 때 static 영역에 고정적으로 할당된다. 객체 생성 없이도 사용 가능합니다. native : 자바로 구현하기 까다로운 것을 다른 언어로 구현하여 자바에서 사용하기 위한 키워드입니다. registerNative 메소드가 static 메모리에 올라가 있습니다. registerNative : Java와 C++ 함수 간의 매핑을 생성하는 데 사용되는 JNI(Java Native Interface)메소드, 인수로 전달된 클래스에 네이티브 메소드를 등록합니다. System클래스의 기본 생성자가 private으로 선언되어 있습니다. out 필드가 public static final을 가지고 PrintStream타입으로 null값을 가지고 있습니다. public : 모든 패키지에서 사용 가능 final : 상수값, 변경 불가능 정리해보면 out 필드는 모든 패키지에서 사용 가능고 인스턴스를 생성하지 않고 사용해야하며 변경이 불가능한 값입니다. 그리고 out필드는 PrintStream 타입으로 선언되어 있는데 PrintStream을 살펴보겠습니다! PrintStream public class PrintStream extends FilterOutputStream{ ... public void println() { newLine(); } /** * Prints a boolean and then terminates the line. This method behaves as * though it invokes {@link #print(boolean)} and then * {@link #println()}. * * @param x The {@code boolean} to be printed */ public void println(boolean x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } /** * Prints a character and then terminates the line. This method behaves as * though it invokes {@link #print(char)} and then * {@link #println()}. * * @param x The {@code char} to be printed. */ public void println(char x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } /** * Prints an integer and then terminates the line. This method behaves as * though it invokes {@link #print(int)} and then * {@link #println()}. * * @param x The {@code int} to be printed. */ public void println(int x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } /** * Prints a long and then terminates the line. This method behaves as * though it invokes {@link #print(long)} and then * {@link #println()}. * * @param x a The {@code long} to be printed. */ public void println(long x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } /** * Prints a float and then terminates the line. This method behaves as * though it invokes {@link #print(float)} and then * {@link #println()}. * * @param x The {@code float} to be printed. */ public void println(float x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } ... public void println(String x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } /** * Prints an Object and then terminates the line. This method calls * at first String.valueOf(x) to get the printed object's string value, * then behaves as * though it invokes {@link #print(String)} and then * {@link #println()}. * * @param x The {@code Object} to be printed. */ public void println(Object x) { String s = String.valueOf(x); if (getClass() == PrintStream.class) { // need to apply String.valueOf again since first invocation // might return null writeln(String.valueOf(s)); } else { synchronized (this) { print(s); newLine(); } } } ... } 위 코드와 같이 PrintStream클래스는 FilterOutputStream클래스를 상속받고 많은 println 메소드에 대해 오버로딩하여 다양한 타입의 매개변수를 받아 구현하고 있습니다. println 메소드를 살펴보겠습니다. public void println(int x) { if (getClass() == PrintStream.class) { writeln(String.valueOf(x)); } else { synchronized (this) { print(x); newLine(); } } } 위 코드는 int 타입을 출력하고 줄바꿈을 해주는 println메소드입니다. 조건식 안의 getClass는 Object 클래스 안에 있는 메소드입니다. 근데 얘가 좀 이상한게 자바 파일 안에 있는 getClass메소드 설명과 API 문서에 있는 설명이 다릅니다… 자바 파일에는 이렇게 적혀있습니다. Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by java.util.HashMap. ‘객체에 대한 해시 코드 값을 반환합니다. 이 메서드는 java.util.HashMap과 같은 해시 테이블에서 사용될 목적으로 지원됩니다.’ 다음은 API 문서에 있는 설명입니다. Returns the runtime class of this Object. The returned Class object is the object that is locked by static synchronized methods of the represented class. ‘이 Object의 실행 클래스를 반환합니다. 반환된 Class 객체는 표시된 클래스의 static synchronized 메서드에 의해 잠겨진 객체입니다.’ 그럼 우선 hash code에 대해 알아보겠습니다. 해시코드를 간단하게 말하면 해시 알고리즘에 의해 생성된 정수 값입니다. int hashCode()로 정의된 hashCode 메소드는 실행 중에(Runtime) 객체의 유일한 integer값을 반환합니다. Object 클래스에서는 heap에 저장된 객체의 메모리 주소를 반환하도록 되어있습니다. hashCode는 HashTable과 같은 자료구조를 사용할 때 데이터가 저장되는 위치를 결정하기 위해 사용됩니다. 찾아보니 위와 같은 설명이 있습니다. 정리해보면 객체의 유일한 Integer값, 그러니까 heap에 저장된 객체의 메모리 주소를 반환하는 메소드인 것 같습니다. 그러면 다음으로 런타임 클래스를 알아보겠습니다. 실행 시 JVM에 로드되는 클래스라고 합니다. 헷갈려서 간단하게 getClass를 사용해보았습니다. String s = \"kimminje\"; System.out.println(s.getClass()); -&gt; class java.lang.String 현재 변수가 참조중인 클래스를 반환합니다. 자바 API 문서에 있는 런타임 클래스를 반환한다는 말이 맞는 것 같은데 일단 나의 실력 성장 후 다시 공부해봐야 할 것 같습니다… 아니다 getClass는 현재 객체의 클래스를 반환한다고 했다. println은 System.out을 사용하니 위에서의 getClass는 System.out 객체의 클래스를 반환하지 않을까? 시도해보겠습니다. System.out.println(System.out.getClass()); -&gt;class java.io.PrintStream 이렇게 PrintStream으로 출력되는 것을 알 수 있습니다. 그러면 println의 메소드로 들어가면 if 문이 참이 되어 실행될 것입니다. 이것도 확인해보겠습니다. if (System.out.getClass()== PrintStream.class){ System.out.println(\"true\"); } -&gt;true true가 출력된 것으로 보아 println의 메소드도 참이 되어 writeln(String.valueOf(x));가 실행되는 것을 알 수 있습니다. 그렇다면 getClass()가 PrintStream 클래스와 같으니 writeln에 x값을 String으로 변환하여 넣어줍니다. x값을 특별한 방식으로 출력하기 위해 사용하는 메소드인 것 같은데 구글에 writeln에 대한 정보가 없습니다… public void print(int i) { write(String.valueOf(i)); } 하지만 print 메소드가 이렇게 구성되어 화면에 출력을 해주는 메소드이니 writeln은 출력을 하고 줄바꿈을 해주는 메소드라는 것을 알 수 있습니다. 그리고 현재 객체가 PrintStream클래스가 아닌 경우는 synchronized block을 통해 thread-safe하게 동작하도록 하고 print메소드를 통해 문자를 출력하고 newLine()메소드를 통해 줄바꿈을 해주는 것을 알 수 있습니다. synchronized block : Synchronized 키워드는 여러개의 스레드가 한개의 자원을 사용하고자 할 때,현재 데이터를 사용하고 있는 해당 스레드를 제외하고 나머지 스레드들은 데이터에 접근 할 수 없도록 막는 개념 정리..👍 이렇게 System.out.println을 뜯어봤습니다. 이것만으로도 API문서와 자바 코드, 구글을 찾아보며 2시간 정도를 썼지만 찾아보는 도중의 깨달음과 자바의 문서와 코드 찾아보는 법을 더 잘 알게된 것 같습니다. 제가 해냈다는게 사실 너무 뿌듯한 것 같습니다. 한번씩 코드를 뜯어보면 제 실력 향상에 좋을 것 같습니다!",
    "tags": "AnomalyDetection study java",
    "url": "/study/java/2023-10-17-sout/"
  }]};
